Sammlung Abschlussarbeit

Anforderungen an Signaturendruck:
- leichte Anpassbarkeit
- modularer Aufbau
- Signaturen aus Datei einlesen
    - eingelesene Signaturen in Liste anzeigen
    - Signaturen sind per PPN gruppiert
    - Auswahl der zu druckenden Signaturen
        - waehlbare Anzahl per Signatur
    - kleine und grosse Signaturen
        - automatische Unterscheidung
    - Signaturen Vorschau
    - Signaturen selbst erstellen
    - Signaturen sollen per Datum auswaehlbar sein
- optionales loeschen der Downloaddatei




Ueberlegungen zur umsetzung:

Auswahl faellt auf Electron:
    - HTML, CSS, Javascript
        - Leichte wartbarkeit / Anpassbarkeit
    - erzeugt ausfuehrbare Version
    - Netzunabhaengig (mit lokalem Drucker)
        - Keine Serverkosten / Serverwartung notwendig


Ablauf:

- alle Signaturen aus der Datei einlesen
    - lese zeile fuer zeile
        - bis ersten 4 Zeichen 0100 sind
            - 0100 == PPN
    - lese zeile fuer zeile
        wenn ersten 4 Zeichen <=7099 && >=7001
        - exemplarNr entspricht den Zeichen 3 und 4 (7001 -> exemplarNr = 1; 7013 -> exemplarNr = 13)
    - lese zeile fuer zeile
        wenn ersten 4 Zeichen == 7100
        - SignaturZeileRoh == aktuelle Zeile
    - lese zeile fuer zeile
        wenn ersten 4 Zeichen == 7901
        - SignaturBearbeitetAmRoh == aktuelle Zeile


wenn(Datei) {
    AnzSig = 0
    sig = new Signatur
    aktuellePPN = ''
    solange nicht EOF {
        zeile = leseZeile()
        erstenVierZeichen = zeile.substring(0, 4)
        switch erstenVierZeichen {
            == 0100 {
                // regex definiert 2 gruppen
                regex = /^(\d{4}\s)(.*)$/

                // es wird mit hilfe des regex die PPN ausgelesen
                aktuellePPN = zeile.replace(regex, '$2')
                sig.setzePPN(aktuellePPN)
            }
            >=7001 && <=7099 {
                // regex definiert 2 gruppen
                regex /^(\d{4})(.*)$/

                // es wird mit hilfe des regex die ExemplarNr ausgelesen
                ExemplarNr = zeile.replace(regex, '$1')
                sig.setzeExemplar(ExemplarNr)
            }
            == 7100 {
                // regex definiert 2 gruppen
                regex = /^(\d{4}\s)(.*)$/

                // es wird mit hilfe des regex die Signatur ausgelesen
                SignaturenText = zeile.replace(regex, '$2')
                sig.setzeSignaturenText(SignaturenText)
            }
            == 7901 {
                // regex definiert 3 gruppen
                regex = /^(\d{4}\s)(\d{2}-\d{2}-\d{2})(.*)$/

                // es wird mit hilfe des regex das BearbeitetAm Datum ausgelesen
                BearbeitetAm = zeile.replace(regex, '$2')
                sig.setzeBearbeitetAm(BearbeitetAm)
            }
        }
        wenn sig.checkAllSet() {
            add sig.getSignatur() to SignaturenListe
            sig = new Signatur
            sig.setzePPN(aktuellePPN)
        }
    }
    wenn (AnzSig == 0){
        Fehlerausgabe: Datei enthaelt keine (lesbare) Signatur
    }

} sonst {
    Fehlerausgabe: Datei nicht gefunden
}